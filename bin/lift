#!/usr/bin/env bash
# Script to orchastrate deployment via Docker on a Synology NAS.

set -euo pipefail

CMD="$(basename $0)"
HOST=dupunkto.org
NET=punctual
ROLE=client
SECRETS=/volume1/docker/.env

export TERM=xterm

# Inlined dotfile scripts, since I want this script to be entirely self-contained.
# See https://git.dupunkto.org/~meta/dotfiles. Written by me--Unlicensed.

quiet() {
  "$@" >/dev/null 2>&1
}

has() {
  command -v "$1" >/dev/null 2>&1
}

err() {
  echo >&2 "$CMD: $1"
  exit 1
}

# Utilities

declare -A wanted

target() {
	local name=$1

	if [[ ${wanted[$name]+_} ]]; then
		echo "==> Recreating $name"
		docker rm -f "$name" >/dev/null || true

		return 0
	else
		echo "==> Starting $name"
		docker start "$name" >/dev/null

		return 1
	fi
}

validate() {
  case "$1" in
    (*[!A-Za-z0-9_-]*) err "invalid project name '$1' (only A-Za-z0-9 and -_ allowed)" ;;
  esac
}

# Public API

usage_client() {
  echo "Usage: $(basename $0) [OPTS] <SUBCOMMAND> [ARGS]"
	echo
  echo "OPTIONS"
  echo "  -h, --help     Show this help."
  echo
  echo "SUBCOMMANDS"
  echo "  setup          Applies Docker configuration for networking and remote builds."
  echo "  build          Remotely builds a container image for the given application."
  echo "  push           Pushes the latest build of the given application to a registry."
  echo "  bootstrap      Recreates the container for the given application, bumping it the the latest available image."
  echo "  restart        Restarts the container for the given application."
  echo "  deploy         Deploys the given application to the configured Lift remote."
  echo "                 (Shorthand for build && push && bootstrap)"
  echo "  update         Uploads the current version of this script to the Lift remote."
	echo
	exit 0
}

usage_remote() {
  echo "Usage: $(basename $0) [OPTS] <SUBCOMMAND> [ARGS]"
	echo
  echo "OPTIONS"
  echo "  -h, --help     Show this help."
  echo
  echo "SUBCOMMANDS"
  echo "  setup          Applies Docker configuration for networking and remote builds."
  echo "  bootstrap      Recreates the container for the given application, bumping it the the latest available image."
	echo
	exit 0
}

setup_client() {
  if quiet docker context inspect lift; then
    quiet docker context rm -f lift
  fi

  quiet docker context create lift --docker "host=ssh://$1"
  echo "Successfully created and configured context."
}

setup_remote() {
  if ! quiet docker network inspect $NET; then
    quiet docker network create -d bridge $NET
    echo "Successfully created and configured network."
  fi

  if has synogroup; then
    if ! quiet sudo synogroup --get docker; then
      quiet sudo synogroup --add docker
    fi

    if ! sudo synogroup --get docker | grep "$USER" >/dev/null 2>&1; then
      quiet sudo synogroup --memberadd docker $USER
    fi

    sudo chown root:docker /var/run/docker.sock
    echo "Enabled rootless docker access for $USER."
  fi
}

bootstrap() {
  source $SECRETS

  for arg in "$@"; do
    wanted["$arg"]=1
  done

  if target master-db; then
    docker run -dit --name master-db \
      --net $NET --restart always \
      -v /volume1/docker/postgres:/var/lib/postgresql/data:rw \
      -e 'PG_DATA=/var/lib/postgresql/data' \
      -e "POSTGRES_USER=$DB_USER" \
      -e "POSTGRES_PASSWORD=$DB_PASS" \
      postgres:17
  fi

  if target gitz; then
    docker run -dit --name gitz \
      --net $NET --restart always \
      -v /volume1/docker/gitz:/var/www/html:rw \
      -v /volume1/git:/var/git:rw \
      -e 'SCAN_PATH=/var/git' \
      'chialab/php:8.3-apache'

    # Make sure the container is allowed to read git repos.
    docker exec gitz git config --system --add safe.directory '*'
  fi

  if target miniflux; then
    docker run -dit --name miniflux \
      --net $NET --restart no \
      -e 'LISTEN_ADDR=0.0.0.0:8080' \
      -e "DATABASE_URL=postgres://$DB_USER:$DB_PASS@master-db:5432/miniflux?sslmode=disable" \
      -e 'RUN_MIGRATIONS=1' \
      -e 'CREATE_ADMIN=1' \
      -e 'ADMIN_USERNAME=axcelott' \
      -e "ADMIN_PASSWORD=$ADMIN_PASS" \
      miniflux/miniflux:latest
  fi

  if target fredericocraft; then
    docker run -dit --name fredericocraft \
      -p 25565:25565/tcp \
      -v /volume1/docker/fredericocraft0:/data:rw \
      -e 'TYPE=paper' \
      -e 'VERSION=1.16.5' \
      -e 'EULA=true' \
      -e 'UID=1000' \
      -e 'GID=1000' \
      -e 'MEMORY=9G' \
      -e 'USE_AIKAR_FLAGS=true' \
      -e 'TZ=Europe/Amsterdam' \
      -e 'DIFFICULTY=2' \
      -e 'FORCE_GAMEMODE=true' \
      -e 'SEED=anotherseason' \
      -e 'LEVEL=notworld' \
      -e 'SPAWN_PROTECTION=0' \
      -e 'ENABLE_WHITELIST=true' \
      -e 'WHITELIST=Axcelott' \
      -e 'OPS=Axcelott' \
      -e 'VANILLATWEAKS_SHARECODE=6ihD0e' \
      itzg/minecraft-server:java11
  fi

  if target gem; then
    docker run -dit --name gem \
      --net $NET -p 1965:1965 \
      -v /volume1/gemini/config.toml:/config/config.toml \
      -v /volume1/gemini/certs:/config \
      -v /volume1/gemini:/var/gemini \
      ghcr.io/tdemin/docker-satellite
  fi

  if target goph; then
    docker run -dit --name goph \
      --net $NET -p 70:70 \
      --hostname dupunkto.org \
      -v /volume1/gopher:/var/gopher:rw \
      -e DISABLE_USERDIRS=1 \
      -e DISABLE_EXECUTABLES=1 \
      -e DISABLE_FOOTER=1 \
      joshkaiju/gophernicus
  fi

  if target inv-sig-helper; then
    docker run -dit --name inv-sig-helper \
      --net $NET --restart no \
      --cap-drop ALL \
      --read-only \
      --security-opt no-new-privileges:true \
      quay.io/invidious/inv-sig-helper:latest --tcp 0.0.0.0:12999
  fi

  if target invidious; then
    docker run -dit --name invidious \
      --net $NET --restart no \
      --link inv-sig-helper \
      -v /volume1/docker/invidious/config.yaml:/etc/invidious/config.yaml:ro \
      -e 'INVIDIOUS_CONFIG_FILE=/etc/invidious/config.yaml' \
      quay.io/invidious/invidious
  fi

  if target bsky; then
    docker run -dit --name bsky \
      --net $NET --restart no \
      -v /volume1/docker/bsky:/pds \
      --env-file /volume1/docker/bsky/pds.env \
      ghcr.io/bluesky-social/pds
  fi

  if target scry; then
    docker run -dit --name scry \
      --net $NET --restart no \
      -v /volume1/git/scry:/repo:rw \
      -e ROOT=/repo -e TOKEN=$SCRY_TOKEN \
      ghcr.io/dupunkto/scry
  fi

  if target nextcloud; then
    docker run -dit --name nextcloud \
      --net $NET --restart no \
      -v /volume1/docker/nextcloud:/var/www/html:rw \
      -e 'PHP_MEMORY_LIMIT=512M' \
      -e 'PHP_UPLOAD_LIMIT=512M' \
      -e 'APACHE_BODY_LIMIT=1073741824' \
      -e 'POSTGRES_DB=nextcloud' \
      -e "POSTGRES_USER=$DB_USER" \
      -e "POSTGRES_PASSWORD=$DB_PASS" \
      -e 'POSTGRES_HOST=master-db:5432' \
      -e 'NEXTCLOUD_ADMIN_USER=axcelott' \
      -e "NEXTCLOUD_ADMIN_PASSWORD=$ADMIN_PASS" \
      nextcloud:latest
  fi

  if target vik; then
    docker run -dit --name vik \
      --net $NET --restart no \
      --shm-size=2gb \
      -v /volume1/docker/vik:/kv \
      -e 'MIX_ENV=prod' \
      -e 'PHX_HOST=vik.dupunkto.org' \
      -e "DATABASE_URL=ecto://$DB_USER:$DB_PASS@master-db/vik" \
      -e "SECRET_KEY_BASE=$KEY_BASE" \
      -e "LOGGER_WEBHOOK=$DISCORD_VIK_WEBHOOK" \
      -e "SCRY_WEBHOOK=http://scry:4000/track/$SCRY_TOKEN" \
      -e "KV_ROOT=/kv" \
      -e "AUTH_PASSWORD=$ADMIN_PASS" \
      ghcr.io/robinboers/vik:latest
  fi

  if target router; then
    docker run -dit --name router \
      --net $NET --restart always \
      --add-host=host.docker.internal:host-gateway \
      -p 443:443/tcp -p 443:443/udp -p 80:80/tcp \
      -v /volume1/www/Caddyfile:/etc/caddy/Caddyfile:ro \
      -v /volume1/www:/var/www/html:ro \
      caddy:latest
  fi
}

# Execution starts here :D

if ! [[ "$ROLE" == "client" || "$ROLE" == "remote" ]]; then
  err "invalid role '$ROLE' (must be one of 'client' or 'remote')"
fi

case ${1:-} in
  ""|-h|--help)
    case $ROLE in
      client) usage_client ;;
      remote) usage_remote ;;
    esac
    ;;

  setup)
    case $ROLE in
      client) setup_client ${2:-$HOST} ;;
      remote) setup_remote ;;
    esac
    ;;

  bootstrap)
    shift
    case $ROLE in
      remote) bootstrap "$@" ;;
      client) echo "lift bootstrap $@" | ssh $HOST -T ;;
    esac
    ;;

  docker)
    if [[ $ROLE == "remote" ]]; then
      err "this is a client-only command"
    fi

    shift
    docker --context=lift "$@"
    ;;

  deploy|build|push)
    if [[ $ROLE == "remote" ]]; then
      err "this is a client-only command"
    fi

    path="${2:-$PWD}"
    name="${3:-$(basename "$path")}"

    validate "$name"

    case "$name" in
      scry|somtomorrow|kodo|gitz|oblikvo) org="dupunkto" ;;
      *) org="robinboers" ;;
    esac

    tag="${4:-"ghcr.io/$org/$name"}"

    case "$1" in
      deploy)
        echo "==> Remotely building $name (as $tag)"
        docker --context=lift build -t "$tag" "$path"
        echo "==> Pushing $name to $tag"
        docker --context=lift push "$tag"
        echo "lift bootstrap $name" | ssh $HOST -T
        ;;

      build) docker --context=lift build -t "$tag" "$path" ;;
      push) docker --context=lift push "$tag" ;;
    esac
    ;;

  update)
    tmp="$(basename "$0")"
    bin="/usr/local/bin/lift"

    rsync "$0" "$HOST:$tmp"

    ssh $HOST "sed -i 's/^ROLE=client/ROLE=remote/' '$tmp'"
    ssh -t $HOST "sudo mv '$tmp' '$bin'"
    ;;

  *)
    err "unknown subcommand '$1'"
esac
